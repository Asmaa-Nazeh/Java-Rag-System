<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Java RAG System&#10;&#10;A Java-based Retrieval-Augmented Generation (RAG) system that combines document ingestion, vector storage, and language model inference to provide contextual question-answering capabilities.&#10;&#10;## Overview&#10;&#10;This project implements a complete RAG pipeline using:&#10;- **Document Ingestion**: Loads and processes text documents&#10;- **Vector Storage**: Uses Milvus for storing document embeddings&#10;- **Embedding Generation**: Python-based API using SentenceTransformer models&#10;- **Language Model**: Integration with Ollama for text generation&#10;- **Retrieval System**: Vector similarity search for relevant context&#10;&#10;## Architecture&#10;&#10;```&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│   Document      │    │   Embedding     │    │   Vector        │&#10;│   Ingestion     │───▶│   Generation    │───▶│   Storage       │&#10;│                 │    │   (Python API)  │    │   (Milvus)      │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;                                                        │&#10;┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐&#10;│   Answer        │    │   Language      │    │   Context       │&#10;│   Generation    │◀───│   Model         │◀───│   Retrieval     │&#10;│                 │    │   (Ollama)      │    │                 │&#10;└─────────────────┘    └─────────────────┘    └─────────────────┘&#10;```&#10;&#10;## Features&#10;&#10;- **Multi-format Document Processing**: Load and process text documents&#10;- **Semantic Search**: Vector-based similarity search using embeddings&#10;- **Context-aware Responses**: Generate answers based on retrieved relevant context&#10;- **Modular Design**: Separate components for ingestion, retrieval, and generation&#10;- **External LLM Integration**: Uses Ollama for language model inference&#10;- **Scalable Vector Storage**: Milvus database for efficient vector operations&#10;&#10;## Prerequisites&#10;&#10;### Java Environment&#10;- Java 11 or higher&#10;- Maven 3.6+&#10;&#10;### External Services&#10;- **Milvus**: Vector database (default: localhost:19530)&#10;- **Ollama**: Language model server (default: localhost:11434)&#10;- **Python Embedding API**: SentenceTransformer service (default: localhost:5005)&#10;&#10;## Installation&#10;&#10;### 1. Clone the Repository&#10;```bash&#10;git clone &lt;repository-url&gt;&#10;cd Java-Rag-System&#10;```&#10;&#10;### 2. Install Java Dependencies&#10;```bash&#10;mvn clean install&#10;```&#10;&#10;### 3. Set up Python Embedding Service&#10;```bash&#10;cd src/embedding-api&#10;pip install flask sentence-transformers&#10;python embedding_api.py&#10;```&#10;&#10;### 4. Install and Start Milvus&#10;Follow the [Milvus installation guide](https://milvus.io/docs/install_standalone-docker.md) or use Docker:&#10;```bash&#10;docker run -d --name milvus -p 19530:19530 milvusdb/milvus:latest&#10;```&#10;&#10;### 5. Install and Start Ollama&#10;- Install Ollama from [https://ollama.ai](https://ollama.ai)&#10;- Pull the required model:&#10;```bash&#10;ollama pull gemma3:1b&#10;```&#10;&#10;## Usage&#10;&#10;### 1. Document Ingestion&#10;First, run the ingestion process to load documents into the vector database:&#10;```bash&#10;mvn exec:java -Dexec.mainClass=&quot;ingestion.App&quot;&#10;```&#10;&#10;### 2. Run RAG Application&#10;Start the main RAG application:&#10;```bash&#10;mvn exec:java -Dexec.mainClass=&quot;LLM.AppRag&quot;&#10;```&#10;&#10;### 3. Ask Questions&#10;The system will prompt you to enter questions, and it will:&#10;1. Retrieve relevant context from the vector database&#10;2. Generate contextual answers using the language model&#10;&#10;## Project Structure&#10;&#10;```&#10;src/&#10;├── main/java/&#10;│   ├── ingestion/           # Document processing and vector storage&#10;│   │   ├── App.java         # Main ingestion application&#10;│   │   ├── SimpleDocumentLoader.java&#10;│   │   ├── RemoteEmbedder.java&#10;│   │   ├── MilvusVectorStore.java&#10;│   │   └── MilvusConnection.java&#10;│   ├── retrieval/           # Vector search and context retrieval&#10;│   │   └── VectorRetriever.java&#10;│   └── LLM/                # Language model integration&#10;│       ├── AppRag.java      # Main RAG application&#10;│       └── RagPipeline.java # RAG pipeline orchestration&#10;├── embedding-api/           # Python embedding service&#10;│   └── embedding_api.py&#10;└── resources/&#10;    └── doc1.txt            # Sample documents&#10;```&#10;&#10;## Configuration&#10;&#10;### Language Model Settings&#10;- **Model**: gemma3:1b (configurable in RagPipeline.java)&#10;- **Temperature**: 0.2&#10;- **Base URL**: http://localhost:11434&#10;&#10;### Vector Database Settings&#10;- **Host**: 127.0.0.1&#10;- **Port**: 19530&#10;- **Collection**: Automatically managed&#10;&#10;### Embedding API Settings&#10;- **Model**: all-MiniLM-L6-v2&#10;- **Endpoint**: http://127.0.0.1:5005/embed&#10;&#10;## Dependencies&#10;&#10;### Java (Maven)&#10;- **LangChain4J**: Framework for LLM applications&#10;- **Ollama Integration**: Language model client&#10;- **Milvus SDK**: Vector database client&#10;- **Gson**: JSON processing&#10;&#10;### Python&#10;- **Flask**: Web framework for embedding API&#10;- **SentenceTransformers**: Pre-trained embedding models&#10;&#10;## Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add some amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;- **Connection refused**: Ensure all external services (Milvus, Ollama, Python API) are running&#10;- **Model not found**: Make sure to pull the required Ollama model: `ollama pull gemma3:1b`&#10;- **Port conflicts**: Check if default ports (19530, 11434, 5005) are available&#10;&#10;### Support&#10;For issues and questions, please create an issue in the repository." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ConsoleRagApp.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ConsoleRagApp.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/retrieval/MilvusConnectionTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/retrieval/MilvusConnectionTest.java" />
              <option name="updatedContent" value="package retrieval;&#10;&#10;import io.milvus.client.MilvusServiceClient;&#10;import io.milvus.param.ConnectParam;&#10;import io.milvus.param.R;&#10;import io.milvus.param.collection.HasCollectionParam;&#10;import io.milvus.param.collection.GetCollectionStatisticsParam;&#10;import io.milvus.grpc.GetCollectionStatisticsResponse;&#10;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;public class MilvusConnectionTest {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot; Testing Milvus connection and collection status...&quot;);&#10;        &#10;        ConnectParam connectParam = ConnectParam.newBuilder()&#10;                .withHost(&quot;127.0.0.1&quot;)&#10;                .withPort(19530)&#10;                .withConnectTimeout(10, TimeUnit.SECONDS)&#10;                .build();&#10;        &#10;        MilvusServiceClient client = new MilvusServiceClient(connectParam);&#10;        &#10;        try {&#10;            // Check if collection exists&#10;            HasCollectionParam hasCollectionParam = HasCollectionParam.newBuilder()&#10;                    .withCollectionName(&quot;text_embeddings&quot;)&#10;                    .build();&#10;            &#10;            R&lt;Boolean&gt; hasCollection = client.hasCollection(hasCollectionParam);&#10;            if (hasCollection.getStatus() != R.Status.Success.getCode()) {&#10;                System.out.println(&quot;❌ Failed to check collection existence: &quot; + hasCollection.getMessage());&#10;                return;&#10;            }&#10;            &#10;            if (!hasCollection.getData()) {&#10;                System.out.println(&quot;❌ Collection 'text_embeddings' does not exist!&quot;);&#10;                System.out.println(&quot; You need to create and populate the collection first.&quot;);&#10;                return;&#10;            }&#10;            &#10;            System.out.println(&quot;✅ Collection 'text_embeddings' exists&quot;);&#10;            &#10;            // Check collection statistics (number of entities)&#10;            GetCollectionStatisticsParam statsParam = GetCollectionStatisticsParam.newBuilder()&#10;                    .withCollectionName(&quot;text_embeddings&quot;)&#10;                    .build();&#10;            &#10;            R&lt;GetCollectionStatisticsResponse&gt; statsResponse = client.getCollectionStatistics(statsParam);&#10;            if (statsResponse.getStatus() == R.Status.Success.getCode()) {&#10;                System.out.println(&quot; Collection statistics: &quot; + statsResponse.getData().getStatsMap());&#10;                &#10;                // Check if collection has data&#10;                String rowCount = statsResponse.getData().getStatsMap().get(&quot;row_count&quot;);&#10;                if (rowCount != null &amp;&amp; !&quot;0&quot;.equals(rowCount)) {&#10;                    System.out.println(&quot;✅ Collection has &quot; + rowCount + &quot; documents&quot;);&#10;                } else {&#10;                    System.out.println(&quot;⚠️ Collection is empty! You need to ingest data first.&quot;);&#10;                }&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ Error connecting to Milvus: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        } finally {&#10;            client.close();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>